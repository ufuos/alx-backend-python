
pipeline {
  agent any

  environment {
    // Jenkins GitHub credentials ID (Secret Text or Username/Password)
    GIT_CREDENTIALS_ID = 'github-token'
    // relative path to the python project inside the repo
    PROJECT_DIR = 'messaging_app'
    REPORT_DIR = "${env.WORKSPACE}/${PROJECT_DIR}/reports"
  }

  options {
    // Keep a reasonable number of builds
    buildDiscarder(logRotator(numToKeepStr: '20'))
    // Add timestamps to console logs
    timestamps()
  }

  stages {

    stage('Checkout') {
      steps {
        // ‚úÖ Explicitly define git branch
        git branch: 'main',
            url: 'https://github.com/ufuos/alx-backend-python.git',
            credentialsId: env.GIT_CREDENTIALS_ID

        echo "‚úÖ Code checked out from main branch."
      }
    }

    stage('Prepare Python') {
      steps {
        dir("${PROJECT_DIR}") {
          // Create reports directory and virtual environment
          sh '''
            mkdir -p reports
            python3 -m venv .venv || python -m venv .venv
            . .venv/bin/activate
            pip3 install --upgrade pip
            echo "‚úÖ Virtual environment created and pip upgraded."
          '''
        }
      }
    }

    stage('Install dependencies') {
      steps {
        dir("${PROJECT_DIR}") {
          // ‚úÖ Explicitly reference messaging_app/requirements.txt
          sh '''
            . .venv/bin/activate
            if [ -f messaging_app/requirements.txt ] || [ -f requirements.txt ]; then
              echo "üì¶ Installing dependencies from requirements.txt..."
              pip3 install -r requirements.txt
              echo "‚úÖ Dependencies installed successfully."
            else
              echo "‚ö†Ô∏è No requirements.txt found ‚Äî skipping dependency installation."
            fi
          '''
        }
      }
    }

    stage('Run tests') {
      steps {
        dir("${PROJECT_DIR}") {
          sh '''
            . .venv/bin/activate
            pip3 install pytest pytest-cov || true
            pytest --junitxml=reports/results.xml || true
          '''
        }
      }
      post {
        always {
          echo "üß™ Test stage complete (success or failure)."
        }
      }
    }

    stage('Publish test results & artifacts') {
      steps {
        dir("${PROJECT_DIR}") {
          archiveArtifacts artifacts: 'reports/**', fingerprint: true, allowEmptyArchive: true
          junit allowEmptyResults: true, testResults: 'reports/results.xml'
          echo "üìÑ Test reports published."
        }
      }
    }
  }

  post {
    success {
      echo "üéâ Pipeline finished successfully."
    }
    unstable {
      echo "‚ö†Ô∏è Pipeline finished ‚Äî some tests failed or were unstable."
    }
    failure {
      echo "‚ùå Pipeline failed. Check the console output for details."
    }
    always {
      dir("${PROJECT_DIR}") {
        // ‚úÖ Optional cleanup to save space
        sh '''
          if [ -d ".venv" ]; then
            rm -rf .venv
            echo "üßπ Cleaned up .venv to save space between builds."
          else
            echo "‚ÑπÔ∏è No .venv directory found to clean up."
          fi
        '''
      }
      echo "‚úÖ Pipeline completed at ${new Date()}."
    }
  }
}
